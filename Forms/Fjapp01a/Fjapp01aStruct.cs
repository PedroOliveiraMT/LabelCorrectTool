
//----------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using Foundations.Core.AppSupportLib.Runtime.ControlsModel;
using Foundations.Core.AppSupportLib.Runtime.ControlsModel.Containers;
using Foundations.Core.AppSupportLib.Runtime.ControlsModel.Alerts;
using Foundations.Core.AppSupportLib.Runtime.ControlsModel.Lovs;
using Foundations.Flavors.Forms;
using Foundations.Flavors.Forms.Descriptors;
using Foundations.Core.AppSupportLib.Runtime.Task;
using Foundations.Core.AppSupportLib.Composition;
using System.Globalization;

namespace Alio.Forms.Fjapp01a
{	
 
	public partial class Fjapp01aTaskBlocks
	{ 
		public Fjapp01aTaskBlocks(Fjapp01aTask task)
		{
			JeHeader = new JeHeaderBlockDescriptor(task);
			JeData = new JeDataBlockDescriptor(task);
			JournalApproval = new JournalApprovalBlockDescriptor(task);
		}		

		public JeHeaderBlockDescriptor JeHeader { get; private set; }
		public JeDataBlockDescriptor JeData { get; private set; }
		public JournalApprovalBlockDescriptor JournalApproval { get; private set; }


		public class JeHeaderBlockDescriptor : BlockDescriptorWrapper
        {
            public JeHeaderBlockDescriptor(AbstractTask task) : base("JE_HEADER", task)
            {
                Items = new JeHeaderItems(this);
            }
            public JeHeaderItems Items { get; private set; }

            public class JeHeaderItems
            {
                public JeHeaderItems(BlockDescriptorWrapper block)
                {
					ReferenceNo = block.FindItem("REFERENCE_NO");
					ShowLov = block.FindItem("SHOW_LOV");
					BatchYear = block.FindItem("BATCH_YEAR");
					BatchNo = block.FindItem("BATCH_NO");
					BatchDate = block.FindItem("BATCH_DATE");
					Requestor = block.FindItem("REQUESTOR");
					UserName = block.FindItem("USER_NAME");
					Approve = block.FindItem("APPROVE");
					Disapprove = block.FindItem("DISAPPROVE");
					DisapprovalMessage = block.FindItem("DISAPPROVAL_MESSAGE");
					DisapprovalEdit = block.FindItem("DISAPPROVAL_EDIT");
					JournalDescription = block.FindItem("JOURNAL_DESCRIPTION");
					UserId = block.FindItem("USER_ID");
					AccountingPeriod = block.FindItem("ACCOUNTING_PERIOD");
 
                }

				public ItemDescriptorWrapper ReferenceNo { get; private set; }
				public ItemDescriptorWrapper ShowLov { get; private set; }
				public ItemDescriptorWrapper BatchYear { get; private set; }
				public ItemDescriptorWrapper BatchNo { get; private set; }
				public ItemDescriptorWrapper BatchDate { get; private set; }
				public ItemDescriptorWrapper Requestor { get; private set; }
				public ItemDescriptorWrapper UserName { get; private set; }
				public ItemDescriptorWrapper Approve { get; private set; }
				public ItemDescriptorWrapper Disapprove { get; private set; }
				public ItemDescriptorWrapper DisapprovalMessage { get; private set; }
				public ItemDescriptorWrapper DisapprovalEdit { get; private set; }
				public ItemDescriptorWrapper JournalDescription { get; private set; }
				public ItemDescriptorWrapper UserId { get; private set; }
				public ItemDescriptorWrapper AccountingPeriod { get; private set; }
 
            }
        }
		public class JeDataBlockDescriptor : BlockDescriptorWrapper
        {
            public JeDataBlockDescriptor(AbstractTask task) : base("JE_DATA", task)
            {
                Items = new JeDataItems(this);
            }
            public JeDataItems Items { get; private set; }

            public class JeDataItems
            {
                public JeDataItems(BlockDescriptorWrapper block)
                {
					DisplayAccount = block.FindItem("DISPLAY_ACCOUNT");
					AccountBalance = block.FindItem("ACCOUNT_BALANCE");
					DrAmount = block.FindItem("DR_AMOUNT");
					CrAmount = block.FindItem("CR_AMOUNT");
					DrTotal = block.FindItem("DR_TOTAL");
					CrTotal = block.FindItem("CR_TOTAL");
					ReferenceNo = block.FindItem("REFERENCE_NO");
					JournalAmount = block.FindItem("JOURNAL_AMOUNT");
					LineNo = block.FindItem("LINE_NO");
					AccountId = block.FindItem("ACCOUNT_ID");
					DebitCreditFlag = block.FindItem("DEBIT_CREDIT_FLAG");
 
                }

				public ItemDescriptorWrapper DisplayAccount { get; private set; }
				public ItemDescriptorWrapper AccountBalance { get; private set; }
				public ItemDescriptorWrapper DrAmount { get; private set; }
				public ItemDescriptorWrapper CrAmount { get; private set; }
				public ItemDescriptorWrapper DrTotal { get; private set; }
				public ItemDescriptorWrapper CrTotal { get; private set; }
				public ItemDescriptorWrapper ReferenceNo { get; private set; }
				public ItemDescriptorWrapper JournalAmount { get; private set; }
				public ItemDescriptorWrapper LineNo { get; private set; }
				public ItemDescriptorWrapper AccountId { get; private set; }
				public ItemDescriptorWrapper DebitCreditFlag { get; private set; }
 
            }
        }
		public class JournalApprovalBlockDescriptor : BlockDescriptorWrapper
        {
            public JournalApprovalBlockDescriptor(AbstractTask task) : base("JOURNAL_APPROVAL", task)
            {
                Items = new JournalApprovalItems(this);
            }
            public JournalApprovalItems Items { get; private set; }

            public class JournalApprovalItems
            {
                public JournalApprovalItems(BlockDescriptorWrapper block)
                {
					ApproverSequence = block.FindItem("APPROVER_SEQUENCE");
					ApprovalCode = block.FindItem("APPROVAL_CODE");
					AppCodeDesc = block.FindItem("APP_CODE_DESC");
					StatusFlag = block.FindItem("STATUS_FLAG");
					StatusDescription = block.FindItem("STATUS_DESCRIPTION");
					StatusDate = block.FindItem("STATUS_DATE");
					UserId = block.FindItem("USER_ID");
					ReferenceNo = block.FindItem("REFERENCE_NO");
 
                }

				public ItemDescriptorWrapper ApproverSequence { get; private set; }
				public ItemDescriptorWrapper ApprovalCode { get; private set; }
				public ItemDescriptorWrapper AppCodeDesc { get; private set; }
				public ItemDescriptorWrapper StatusFlag { get; private set; }
				public ItemDescriptorWrapper StatusDescription { get; private set; }
				public ItemDescriptorWrapper StatusDate { get; private set; }
				public ItemDescriptorWrapper UserId { get; private set; }
				public ItemDescriptorWrapper ReferenceNo { get; private set; }
 
            }
        }
 
	}
  

	public partial class Fjapp01aTaskWindows 
	{ 
		public Fjapp01aTaskWindows(Fjapp01aTask task)
		{
			DateLovWindow = new WindowDescriptorWrapper(task.FindWindow("DATE_LOV_WINDOW"));
			AjeApproval = new WindowDescriptorWrapper(task.FindWindow("AJE_APPROVAL"));
		}
		public WindowDescriptor DateLovWindow { get; private set; }
		public WindowDescriptor AjeApproval { get; private set; }
	}

	public partial class Fjapp01aTaskCanvases
	{ 
		public Fjapp01aTaskCanvases(Fjapp01aTask task)
		{
			DateLovCanvas = new CanvasDescriptorWrapper(task.FindCanvas("DATE_LOV_CANVAS"));
			AjeApprovalCv = new CanvasDescriptorWrapper(task.FindCanvas("AJE_APPROVAL_CV"));
		}
		public CanvasDescriptor DateLovCanvas { get; private set; }
		public CanvasDescriptor AjeApprovalCv { get; private set; }
  
	}
  

	public partial class Fjapp01aTaskAlerts
	{ 
		public Fjapp01aTaskAlerts(Fjapp01aTask task)
		{
			OnErrorStop = new AlertDescriptorWrapper(task.FindAlert("ON_ERROR_STOP"));
			OnErrorCaution = new AlertDescriptorWrapper(task.FindAlert("ON_ERROR_CAUTION"));
			OnMessage = new AlertDescriptorWrapper(task.FindAlert("ON_MESSAGE"));
			NoRecord = new AlertDescriptorWrapper(task.FindAlert("NO_RECORD"));
			DebitCredit = new AlertDescriptorWrapper(task.FindAlert("DEBIT_CREDIT"));
		}
		public AlertDescriptor OnErrorStop { get; private set; }
		public AlertDescriptor OnErrorCaution { get; private set; }
		public AlertDescriptor OnMessage { get; private set; }
		public AlertDescriptor NoRecord { get; private set; }
		public AlertDescriptor DebitCredit { get; private set; }
  
	}
  

	public partial class Fjapp01aTaskLovs
	{ 
		public Fjapp01aTaskLovs(Fjapp01aTask task)
		{
			PendingApprovalsLov = new LovDescriptorWrapper(task.FindLov("PENDING_APPROVALS_LOV"));
		}
		public LovDescriptor PendingApprovalsLov { get; private set; }
  
	}
  
}
  