
//----------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using Foundations.Core.AppSupportLib.Runtime.ControlsModel;
using Foundations.Core.AppSupportLib.Runtime.ControlsModel.Containers;
using Foundations.Core.AppSupportLib.Runtime.ControlsModel.Alerts;
using Foundations.Core.AppSupportLib.Runtime.ControlsModel.Lovs;
using Foundations.Flavors.Forms;
using Foundations.Flavors.Forms.Descriptors;
using Foundations.Core.AppSupportLib.Runtime.Task;
using Foundations.Core.AppSupportLib.Composition;
using System.Globalization;

namespace Alio.Forms.Fmbth01a
{	
 
	public partial class Fmbth01aTaskBlocks
	{ 
		public Fmbth01aTaskBlocks(Fmbth01aTask task)
		{
			Batches = new BatchesBlockDescriptor(task);
			Hold = new HoldBlockDescriptor(task);
			ControlsFix = new ControlsFixBlockDescriptor(task);
		}		

		public BatchesBlockDescriptor Batches { get; private set; }
		public HoldBlockDescriptor Hold { get; private set; }
		public ControlsFixBlockDescriptor ControlsFix { get; private set; }


		public class BatchesBlockDescriptor : BlockDescriptorWrapper
        {
            public BatchesBlockDescriptor(AbstractTask task) : base("BATCHES", task)
            {
                Items = new BatchesItems(this);
            }
            public BatchesItems Items { get; private set; }

            public class BatchesItems
            {
                public BatchesItems(BlockDescriptorWrapper block)
                {
					AssignBatch = block.FindItem("ASSIGN_BATCH");
					BatchYear = block.FindItem("BATCH_YEAR");
					BatchNo = block.FindItem("BATCH_NO");
					BatchLovBtn = block.FindItem("BATCH_LOV_BTN");
					Status = block.FindItem("STATUS");
					WarrantLovBtn = block.FindItem("WARRANT_LOV_BTN");
					DateCreated = block.FindItem("DATE_CREATED");
					BatchDate = block.FindItem("BATCH_DATE");
					BatchDescription = block.FindItem("BATCH_DESCRIPTION");
					AccountPeriod = block.FindItem("ACCOUNT_PERIOD");
					UseThisBatch = block.FindItem("USE_THIS_BATCH");
					Details = block.FindItem("DETAILS");
					PostedFlag = block.FindItem("POSTED_FLAG");
					UserId = block.FindItem("USER_ID");
					AssignWarrant = block.FindItem("ASSIGN_WARRANT");
					WarrantNo = block.FindItem("WARRANT_NO");
					WarrantFromDate = block.FindItem("WARRANT_FROM_DATE");
					WarrantToDate = block.FindItem("WARRANT_TO_DATE");
					BatchType = block.FindItem("BATCH_TYPE");
					BatchOrigin = block.FindItem("BATCH_ORIGIN");
					AccessFlag = block.FindItem("ACCESS_FLAG");
					NextKeysBatch = block.FindItem("NEXT_KEYS_BATCH");
					ResetActiveBatch = block.FindItem("RESET_ACTIVE_BATCH");
					BatchMasterListing = block.FindItem("BATCH_MASTER_LISTING");
 
                }

				public ItemDescriptorWrapper AssignBatch { get; private set; }
				public ItemDescriptorWrapper BatchYear { get; private set; }
				public ItemDescriptorWrapper BatchNo { get; private set; }
				public ItemDescriptorWrapper BatchLovBtn { get; private set; }
				public ItemDescriptorWrapper Status { get; private set; }
				public ItemDescriptorWrapper WarrantLovBtn { get; private set; }
				public ItemDescriptorWrapper DateCreated { get; private set; }
				public ItemDescriptorWrapper BatchDate { get; private set; }
				public ItemDescriptorWrapper BatchDescription { get; private set; }
				public ItemDescriptorWrapper AccountPeriod { get; private set; }
				public ItemDescriptorWrapper UseThisBatch { get; private set; }
				public ItemDescriptorWrapper Details { get; private set; }
				public ItemDescriptorWrapper PostedFlag { get; private set; }
				public ItemDescriptorWrapper UserId { get; private set; }
				public ItemDescriptorWrapper AssignWarrant { get; private set; }
				public ItemDescriptorWrapper WarrantNo { get; private set; }
				public ItemDescriptorWrapper WarrantFromDate { get; private set; }
				public ItemDescriptorWrapper WarrantToDate { get; private set; }
				public ItemDescriptorWrapper BatchType { get; private set; }
				public ItemDescriptorWrapper BatchOrigin { get; private set; }
				public ItemDescriptorWrapper AccessFlag { get; private set; }
				public ItemDescriptorWrapper NextKeysBatch { get; private set; }
				public ItemDescriptorWrapper ResetActiveBatch { get; private set; }
				public ItemDescriptorWrapper BatchMasterListing { get; private set; }
 
            }
        }
		public class HoldBlockDescriptor : BlockDescriptorWrapper
        {
            public HoldBlockDescriptor(AbstractTask task) : base("HOLD", task)
            {
                Items = new HoldItems(this);
            }
            public HoldItems Items { get; private set; }

            public class HoldItems
            {
                public HoldItems(BlockDescriptorWrapper block)
                {
					AccountPeriod = block.FindItem("ACCOUNT_PERIOD");
 
                }

				public ItemDescriptorWrapper AccountPeriod { get; private set; }
 
            }
        }
		public class ControlsFixBlockDescriptor : BlockDescriptorWrapper
        {
            public ControlsFixBlockDescriptor(AbstractTask task) : base("CONTROLS_FIX", task)
            {
                Items = new ControlsFixItems(this);
            }
            public ControlsFixItems Items { get; private set; }

            public class ControlsFixItems
            {
                public ControlsFixItems(BlockDescriptorWrapper block)
                {
					Query = block.FindItem("QUERY");
 
                }

				public ItemDescriptorWrapper Query { get; private set; }
 
            }
        }
 
	}
  

	public partial class Fmbth01aTaskWindows 
	{ 
		public Fmbth01aTaskWindows(Fmbth01aTask task)
		{
			Batches = new WindowDescriptorWrapper(task.FindWindow("BATCHES"));
		}
		public WindowDescriptor Batches { get; private set; }
	}

	public partial class Fmbth01aTaskCanvases
	{ 
		public Fmbth01aTaskCanvases(Fmbth01aTask task)
		{
			Batches = new CanvasDescriptorWrapper(task.FindCanvas("BATCHES"));
		}
		public CanvasDescriptor Batches { get; private set; }
  
	}
  

	public partial class Fmbth01aTaskAlerts
	{ 
		public Fmbth01aTaskAlerts(Fmbth01aTask task)
		{
			OnMessage = new AlertDescriptorWrapper(task.FindAlert("ON_MESSAGE"));
			OnErrorCaution = new AlertDescriptorWrapper(task.FindAlert("ON_ERROR_CAUTION"));
			OnErrorStop = new AlertDescriptorWrapper(task.FindAlert("ON_ERROR_STOP"));
			NoRecord = new AlertDescriptorWrapper(task.FindAlert("NO_RECORD"));
			SaveChanges = new AlertDescriptorWrapper(task.FindAlert("SAVE_CHANGES"));
			AccountPeriodWarning = new AlertDescriptorWrapper(task.FindAlert("ACCOUNT_PERIOD_WARNING"));
			AccountPeriodChange = new AlertDescriptorWrapper(task.FindAlert("ACCOUNT_PERIOD_CHANGE"));
			BatchPrefix = new AlertDescriptorWrapper(task.FindAlert("BATCH_PREFIX"));
			DebugMessage = new AlertDescriptorWrapper(task.FindAlert("DEBUG_MESSAGE"));
		}
		public AlertDescriptor OnMessage { get; private set; }
		public AlertDescriptor OnErrorCaution { get; private set; }
		public AlertDescriptor OnErrorStop { get; private set; }
		public AlertDescriptor NoRecord { get; private set; }
		public AlertDescriptor SaveChanges { get; private set; }
		public AlertDescriptor AccountPeriodWarning { get; private set; }
		public AlertDescriptor AccountPeriodChange { get; private set; }
		public AlertDescriptor BatchPrefix { get; private set; }
		public AlertDescriptor DebugMessage { get; private set; }
  
	}
  

	public partial class Fmbth01aTaskLovs
	{ 
		public Fmbth01aTaskLovs(Fmbth01aTask task)
		{
			WarrantNoLov = new LovDescriptorWrapper(task.FindLov("WARRANT_NO_LOV"));
			BatchNoLov = new LovDescriptorWrapper(task.FindLov("BATCH_NO_LOV"));
		}
		public LovDescriptor WarrantNoLov { get; private set; }
		public LovDescriptor BatchNoLov { get; private set; }
  
	}
  
}
  