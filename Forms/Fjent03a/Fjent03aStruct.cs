
//----------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using Foundations.Core.AppSupportLib.Runtime.ControlsModel;
using Foundations.Core.AppSupportLib.Runtime.ControlsModel.Containers;
using Foundations.Core.AppSupportLib.Runtime.ControlsModel.Alerts;
using Foundations.Core.AppSupportLib.Runtime.ControlsModel.Lovs;
using Foundations.Flavors.Forms;
using Foundations.Flavors.Forms.Descriptors;
using Foundations.Core.AppSupportLib.Runtime.Task;
using Foundations.Core.AppSupportLib.Composition;
using System.Globalization;

namespace Alio.Forms.Fjent03a
{	
 
	public partial class Fjent03aTaskBlocks
	{ 
		public Fjent03aTaskBlocks(Fjent03aTask task)
		{
			RecurJeHeader = new RecurJeHeaderBlockDescriptor(task);
			RecurJeData = new RecurJeDataBlockDescriptor(task);
			DescButtons = new DescButtonsBlockDescriptor(task);
			BatchNoBlock = new BatchNoBlockBlockDescriptor(task);
			Hold = new HoldBlockDescriptor(task);
		}		

		public RecurJeHeaderBlockDescriptor RecurJeHeader { get; private set; }
		public RecurJeDataBlockDescriptor RecurJeData { get; private set; }
		public DescButtonsBlockDescriptor DescButtons { get; private set; }
		public BatchNoBlockBlockDescriptor BatchNoBlock { get; private set; }
		public HoldBlockDescriptor Hold { get; private set; }


		public class RecurJeHeaderBlockDescriptor : BlockDescriptorWrapper
        {
            public RecurJeHeaderBlockDescriptor(AbstractTask task) : base("RECUR_JE_HEADER", task)
            {
                Items = new RecurJeHeaderItems(this);
            }
            public RecurJeHeaderItems Items { get; private set; }

            public class RecurJeHeaderItems
            {
                public RecurJeHeaderItems(BlockDescriptorWrapper block)
                {
					AssignRecurJournalId = block.FindItem("ASSIGN_RECUR_JOURNAL_ID");
					RecurJournalId = block.FindItem("RECUR_JOURNAL_ID");
					RecurJournalDesc = block.FindItem("RECUR_JOURNAL_DESC");
					ShowLov = block.FindItem("SHOW_LOV");
					AssignReference = block.FindItem("ASSIGN_REFERENCE");
					ReferenceNo = block.FindItem("REFERENCE_NO");
					JournalDescription = block.FindItem("JOURNAL_DESCRIPTION");
					JournalDate = block.FindItem("JOURNAL_DATE");
					ZeroAmounts = block.FindItem("ZERO_AMOUNTS");
					CreateJournal = block.FindItem("CREATE_JOURNAL");
					NextLineNo = block.FindItem("NEXT_LINE_NO");
					ApprovalChain = block.FindItem("APPROVAL_CHAIN");
					ApprovalChainButton = block.FindItem("APPROVAL_CHAIN_BUTTON");
					ReadyForApproval = block.FindItem("READY_FOR_APPROVAL");
 
                }

				public ItemDescriptorWrapper AssignRecurJournalId { get; private set; }
				public ItemDescriptorWrapper RecurJournalId { get; private set; }
				public ItemDescriptorWrapper RecurJournalDesc { get; private set; }
				public ItemDescriptorWrapper ShowLov { get; private set; }
				public ItemDescriptorWrapper AssignReference { get; private set; }
				public ItemDescriptorWrapper ReferenceNo { get; private set; }
				public ItemDescriptorWrapper JournalDescription { get; private set; }
				public ItemDescriptorWrapper JournalDate { get; private set; }
				public ItemDescriptorWrapper ZeroAmounts { get; private set; }
				public ItemDescriptorWrapper CreateJournal { get; private set; }
				public ItemDescriptorWrapper NextLineNo { get; private set; }
				public ItemDescriptorWrapper ApprovalChain { get; private set; }
				public ItemDescriptorWrapper ApprovalChainButton { get; private set; }
				public ItemDescriptorWrapper ReadyForApproval { get; private set; }
 
            }
        }
		public class RecurJeDataBlockDescriptor : BlockDescriptorWrapper
        {
            public RecurJeDataBlockDescriptor(AbstractTask task) : base("RECUR_JE_DATA", task)
            {
                Items = new RecurJeDataItems(this);
            }
            public RecurJeDataItems Items { get; private set; }

            public class RecurJeDataItems
            {
                public RecurJeDataItems(BlockDescriptorWrapper block)
                {
					LineNo = block.FindItem("LINE_NO");
					AccountNo = block.FindItem("ACCOUNT_NO");
					ShowLov = block.FindItem("SHOW_LOV");
					AccountBalance = block.FindItem("ACCOUNT_BALANCE");
					DrAmount = block.FindItem("DR_AMOUNT");
					CrAmount = block.FindItem("CR_AMOUNT");
					RecurJournalId = block.FindItem("RECUR_JOURNAL_ID");
					JournalAmount = block.FindItem("JOURNAL_AMOUNT");
					AccountId = block.FindItem("ACCOUNT_ID");
					JournalDescription = block.FindItem("JOURNAL_DESCRIPTION");
					DebitCreditFlag = block.FindItem("DEBIT_CREDIT_FLAG");
					DrTotal = block.FindItem("DR_TOTAL");
					CrTotal = block.FindItem("CR_TOTAL");
					Resequence = block.FindItem("RESEQUENCE");
					HoldJournalAmount = block.FindItem("HOLD_JOURNAL_AMOUNT");
					HoldAccountId = block.FindItem("HOLD_ACCOUNT_ID");
					HoldDrAmount = block.FindItem("HOLD_DR_AMOUNT");
					HoldCrAmount = block.FindItem("HOLD_CR_AMOUNT");
 
                }

				public ItemDescriptorWrapper LineNo { get; private set; }
				public ItemDescriptorWrapper AccountNo { get; private set; }
				public ItemDescriptorWrapper ShowLov { get; private set; }
				public ItemDescriptorWrapper AccountBalance { get; private set; }
				public ItemDescriptorWrapper DrAmount { get; private set; }
				public ItemDescriptorWrapper CrAmount { get; private set; }
				public ItemDescriptorWrapper RecurJournalId { get; private set; }
				public ItemDescriptorWrapper JournalAmount { get; private set; }
				public ItemDescriptorWrapper AccountId { get; private set; }
				public ItemDescriptorWrapper JournalDescription { get; private set; }
				public ItemDescriptorWrapper DebitCreditFlag { get; private set; }
				public ItemDescriptorWrapper DrTotal { get; private set; }
				public ItemDescriptorWrapper CrTotal { get; private set; }
				public ItemDescriptorWrapper Resequence { get; private set; }
				public ItemDescriptorWrapper HoldJournalAmount { get; private set; }
				public ItemDescriptorWrapper HoldAccountId { get; private set; }
				public ItemDescriptorWrapper HoldDrAmount { get; private set; }
				public ItemDescriptorWrapper HoldCrAmount { get; private set; }
 
            }
        }
		public class DescButtonsBlockDescriptor : BlockDescriptorWrapper
        {
            public DescButtonsBlockDescriptor(AbstractTask task) : base("DESC_BUTTONS", task)
            {
                Items = new DescButtonsItems(this);
            }
            public DescButtonsItems Items { get; private set; }

            public class DescButtonsItems
            {
                public DescButtonsItems(BlockDescriptorWrapper block)
                {
					DescriptionType = block.FindItem("DESCRIPTION_TYPE");
 
                }

				public ItemDescriptorWrapper DescriptionType { get; private set; }
 
            }
        }
		public class BatchNoBlockBlockDescriptor : BlockDescriptorWrapper
        {
            public BatchNoBlockBlockDescriptor(AbstractTask task) : base("BATCH_NO_BLOCK", task)
            {
                Items = new BatchNoBlockItems(this);
            }
            public BatchNoBlockItems Items { get; private set; }

            public class BatchNoBlockItems
            {
                public BatchNoBlockItems(BlockDescriptorWrapper block)
                {
					BatchDate = block.FindItem("BATCH_DATE");
					ShowBal = block.FindItem("SHOW_BAL");
					BatchYear = block.FindItem("BATCH_YEAR");
					BatchNo = block.FindItem("BATCH_NO");
					AccountingPeriod = block.FindItem("ACCOUNTING_PERIOD");
 
                }

				public ItemDescriptorWrapper BatchDate { get; private set; }
				public ItemDescriptorWrapper ShowBal { get; private set; }
				public ItemDescriptorWrapper BatchYear { get; private set; }
				public ItemDescriptorWrapper BatchNo { get; private set; }
				public ItemDescriptorWrapper AccountingPeriod { get; private set; }
 
            }
        }
		public class HoldBlockDescriptor : BlockDescriptorWrapper
        {
            public HoldBlockDescriptor(AbstractTask task) : base("HOLD", task)
            {
                Items = new HoldItems(this);
            }
            public HoldItems Items { get; private set; }

            public class HoldItems
            {
                public HoldItems(BlockDescriptorWrapper block)
                {
					HoldDesc = block.FindItem("HOLD_DESC");
 
                }

				public ItemDescriptorWrapper HoldDesc { get; private set; }
 
            }
        }
 
	}
  

	public partial class Fjent03aTaskWindows 
	{ 
		public Fjent03aTaskWindows(Fjent03aTask task)
		{
			RecurJournalEntry = new WindowDescriptorWrapper(task.FindWindow("RECUR_JOURNAL_ENTRY"));
		}
		public WindowDescriptor RecurJournalEntry { get; private set; }
	}

	public partial class Fjent03aTaskCanvases
	{ 
		public Fjent03aTaskCanvases(Fjent03aTask task)
		{
			RecurJouralEntry = new CanvasDescriptorWrapper(task.FindCanvas("RECUR_JOURAL_ENTRY"));
		}
		public CanvasDescriptor RecurJouralEntry { get; private set; }
  
	}
  

	public partial class Fjent03aTaskAlerts
	{ 
		public Fjent03aTaskAlerts(Fjent03aTask task)
		{
			OverBudgetNoOverride = new AlertDescriptorWrapper(task.FindAlert("OVER_BUDGET_NO_OVERRIDE"));
			AccountAlert = new AlertDescriptorWrapper(task.FindAlert("ACCOUNT_ALERT"));
			NoRecord = new AlertDescriptorWrapper(task.FindAlert("NO_RECORD"));
			ZeroAmounts = new AlertDescriptorWrapper(task.FindAlert("ZERO_AMOUNTS"));
			OnMessage = new AlertDescriptorWrapper(task.FindAlert("ON_MESSAGE"));
			OnErrorCaution = new AlertDescriptorWrapper(task.FindAlert("ON_ERROR_CAUTION"));
			OnErrorStop = new AlertDescriptorWrapper(task.FindAlert("ON_ERROR_STOP"));
			OverBudgetOverride = new AlertDescriptorWrapper(task.FindAlert("OVER_BUDGET_OVERRIDE"));
		}
		public AlertDescriptor OverBudgetNoOverride { get; private set; }
		public AlertDescriptor AccountAlert { get; private set; }
		public AlertDescriptor NoRecord { get; private set; }
		public AlertDescriptor ZeroAmounts { get; private set; }
		public AlertDescriptor OnMessage { get; private set; }
		public AlertDescriptor OnErrorCaution { get; private set; }
		public AlertDescriptor OnErrorStop { get; private set; }
		public AlertDescriptor OverBudgetOverride { get; private set; }
  
	}
  

	public partial class Fjent03aTaskLovs
	{ 
		public Fjent03aTaskLovs(Fjent03aTask task)
		{
			RecurJeHeader = new LovDescriptorWrapper(task.FindLov("RECUR_JE_HEADER"));
			ApprovalChains = new LovDescriptorWrapper(task.FindLov("APPROVAL_CHAINS"));
		}
		public LovDescriptor RecurJeHeader { get; private set; }
		public LovDescriptor ApprovalChains { get; private set; }
  
	}
  
}
  